FORMAT: 1A
HOST: /api

# Todo Mock API

Todo アプリのモック API のドキュメントです。
かなり変更される可能性があるため、バージョンを確認してください。

# Group ユーザー認証

## 登録 [/users/register]

### 登録 [POST]
+ Request (application/json)
    + Body

            {
                "username": "string",
                "password": "string"
            }

+ Response 200 (application/json)
    + Body

            {
                "success": true,
            }

+ Response 409 (application/json)
    既に登録されている場合
    + Body

            { 
                "code": "409",
                "message": "string",
                "display_message": "string"
            }


## ログイン [/users/login]

### ログイン [POST]
認証用のトークンを発行する

+ Request (application/json)
    + Body

            {
                "username": "string",
                "password": "string"
            }

+ Response 200 (application/json)
    + Body 

            {
                "success": true,
                "token": "string"
            }

+ Response 401 (application/json)
    認証失敗時
    + Body 

            { 
                "code": "401",
                "message": "string",
                "display_message": "string"
            }


## ログアウト [/users/logout]

### ログアウト [POST]
+ Request
    + Headers

            Authorization: Bearer {token}

+ Response 200 (application/json)

        {
            "success": true,
        }

+ Response 401 (application/json)

        { 
            "code": "401",
            "message": "string",
            "display_message": "string"
        }

# Group タスク

## 一覧 [/tasks]

### 一覧取得 [GET]
+ Request
    + Headers

            Authorization: Bearer {token}

+ Response 200 (application/json)

        [
            {
                "id": "string",
                "title": "string",
                "detail": "string",
                "is_complete": false,
                "created_at": "2000-12-31T23:59:59+09:00"
            },
            {
                "id": "string",
                "title": "string",
                "is_complete": false,
                "created_at": "2000-12-31T23:59:59+09:00"
            }
        ]

+ Response 401 (application/json)

        { 
            "code": "401",
            "message": "string",
            "display_message": "string"
        }

### 登録 [POST]
+ Request (application/json)
    + Headers

            Authorization: Bearer {token}
    + Body

            {
                "title": "SampleTask",
                "detail": "SampleDetail",
            }

+ Response 200 (application/json)

        {
            "id": "string",
            "title": "string",
            "detail": "string",
            "is_complete": false,
            "created_at": "2000-12-31T23:59:59+09:00"
        },

+ Response 401 (application/json)

        { 
            "code": "401",
            "message": "string",
            "display_message": "string"
        }

## 個別 [/tasks/{id}]

### 取得 [GET]
+ Parameters
    + id: asgsngasasdfkjasdfas (string) - タスク ID
+ Request
    + Headers

            Authorization: Bearer {token}

+ Response 200 (application/json)
    
        {
            "id": "string",
            "title": "string",
            "detail": "string",
            "is_complete": false,
            "created_at": "2000-12-31T23:59:59+09:00"
        },

+ Response 401 (application/json)

        { 
            "code": "401",
            "message": "string",
            "display_message": "string"
        }

+ Response 404 (application/json)

        { 
            "code": "404",
            "message": "string",
            "display_message": "string"
        }

### 更新 [PATCH]
+ Parameters
    + id: asgsngasasdfkjasdfas (string) - タスク ID
+ Request (application/json)
    + Headers

            Authorization: Bearer {token}
    + Body

            {
                "title": "SampleHogeTask",
                "detail": "SampleDetail",
            }

+ Response 200 (application/json)

        {
            "id": "string",
            "title": "string",
            "detail": "string",
            "is_complete": false,
            "created_at": "2000-12-31T23:59:59+09:00"
        },

+ Response 401 (application/json)

        { 
            "code": "401",
            "message": "string",
            "display_message": "string"
        }

+ Response 404 (application/json)

        { 
            "code": "404",
            "message": "string",
            "display_message": "string"
        }

### 削除 [DELETE]
+ Parameters
    + id: asgsngasasdfkjasdfas (string) - タスク ID
+ Request
    + Headers

            Authorization: Bearer {token}

+ Response 200 (application/json)

        {
            "message": "Successfully deleted"
        }
+ Response 401 (application/json)

        { 
            "code": "401",
            "message": "string",
            "display_message": "string"
        }

+ Response 404 (application/json)

        { 
            "code": "404",
            "message": "string",
            "display_message": "string"
        }

## タスク完了 [/tasks/{id}/completion]

### 完了 [PUT]
+ Parameters
    + id: asgsngasasdfkjasdfas (string) - タスク ID
+ Request
    + Headers

            Authorization: Bearer {token}

+ Response 200 (application/json)

        {
            "id": "string",
            "title": "string",
            "detail": "string",
            "is_complete": true,
            "created_at": "2000-12-31T23:59:59+09:00"
        },

+ Response 401 (application/json)

        { 
            "code": "401",
            "message": "string",
            "display_message": "string"
        }

+ Response 404 (application/json)

        { 
            "code": "404",
            "message": "string",
            "display_message": "string"
        }

### 完了取り消し [DELETE]
+ Parameters
    + id: asgsngasasdfkjasdfas (string) - タスク ID
+ Request
    + Headers

            Authorization: Bearer {token}

+ Response 200 (application/json)

        {
            "id": "string",
            "title": "string",
            "detail": "string",
            "is_complete": false,
            "created_at": "2000-12-31T23:59:59+09:00"
        },

+ Response 401 (application/json)

        { 
            "code": "401",
            "message": "string",
            "display_message": "string"
        }

+ Response 404 (application/json)

        { 
            "code": "404",
            "message": "string",
            "display_message": "string"
        }
            